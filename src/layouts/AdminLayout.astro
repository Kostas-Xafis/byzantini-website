---
import Links from "../components/headers/Links.astro";
import DatepickerCSS from "../components/DatepickerCSS.astro";
export interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<meta name="description" content="Διαχείρηση Σχολής" />
		<title>{title}</title>
		<Links />
		<style is:inline>
			html {
				font-family: system-ui, sans-serif;
				background-color: #f6f6f6;
			}
			#AdminPage {
				grid-template-columns: 180px 1fr;
				grid-template-rows: 100%;
				height: 100dvh;
				background: rgb(252, 240, 240);
			}
			label,
			button {
				text-shadow: -1px 1px 2px rgba(0 0 0/0.15);
			}
			p,
			a,
			button,
			input[name*='date']::placeholder {
				color: #282828;
			}
			select {
				/* firefox fix from gray -> white */
				background-color: white;
			}
			input[type="number"] {
				appearance: textfield;
				-moz-appearance: textfield;
			}
			input[type="date"]::-webkit-inner-spin-button,
			input::-webkit-outer-spin-button,
			input::-webkit-inner-spin-button {
				display: none;
				-webkit-appearance: none;
			}
			@keyframes ShakeAnimation {
				0% {
					transform: translateX(0);
					filter: blur(0px);
				}
				10%,
				30%,
				70%,
				90% {
					transform: translateX(1px);
				}
				20%,
				40%,
				60%,
				80% {
					transform: translateX(-1px);
				}
				50% {
					transform: translateX(1px);
					filter: blur(1px);
				}
				100% {
					transform: translateX(0px);
					filter: blur(0px);
				}
			}

			.animate-shake ~ button:first-of-type,
			.animate-shake button {
				animation: ShakeAnimation 0.6s ease-in-out;
			}
			@keyframes fadeInRight {
				0% {
					opacity: 0.0001;
					transform: translateX(2rem);
				}
				80% {
					opacity: 1;
				}
				100% {
					opacity: 1;
					transform: translateX(0px);
				}
			}
			@keyframes fadeInLeft {
				0% {
					opacity: 0.0001;
					transform: translateX(-2rem);
				}
				80% {
					opacity: 1;
				}
				100% {
					opacity: 1;
					transform: translateX(0px);
				}
			}
			@keyframes slideInBottom {
				0% {
					transform: translateY(2rem);
				}
				100% {
					transform: translateY(0px);
				}
			}
		</style>
		<style is:inline>
			.spinner {
				background:
					radial-gradient(farthest-side, rgb(127, 29, 29) 94%, #0000) top/8px 8px
						no-repeat,
					conic-gradient(#0000 30%, rgb(127, 29, 29));
				-webkit-mask: radial-gradient(farthest-side, #0000 calc(100% - 8px), #000 0);
				animation: spin 1s infinite linear;
			}
			@keyframes spin {
				100% {
					transform: rotate(1turn);
				}
			}
			.fadeInRightAnim {
				animation: fadeInRight 0.5s ease-in-out forwards;
			}
			.fadeInLeftAnim {
				animation: fadeInLeft 0.5s ease-in-out forwards;
			}
			.fadeOutRightAnim {
				animation: fadeInLeft 0.5s ease-in-out reverse forwards;
			}
			.fadeOutLeftAnim {
				animation: fadeInRight 0.5s ease-in-out reverse forwards;
			}
			.slideInBottomAnim {
				animation: slideInBottom 0.5s ease-in-out forwards;
			}
		</style>
	</head>
	<body class="box-border p-0">
		<script>
			import { AnimTimeline, onElementMount } from "../../lib/utils.client";
			import { API, useAPI } from "../../lib/hooks/useAPI.astro";

			window.matchMedia("(max-width: 640px)").matches &&
				onElementMount("#burgerNav", () => {
					document
						.querySelector<HTMLElement>("#burgerNav")
						?.addEventListener("click", () => {
							const menu = document.querySelector("#burgerNav > div") as HTMLElement;
							const isOpen = menu.parentElement?.classList.contains("open");
							const atl = new AnimTimeline();
							if (isOpen) {
								atl.step(() =>
								menu.parentElement?.classList.remove("open")).step({
									time: 700,
									anim: () => menu.classList.add("hidden", "flex")
								}).start();
							} else {
								atl.step(() => {
									menu.classList.toggle("hidden");
									menu.classList.toggle("flex");
								})
								.step(() => menu.parentElement?.classList.toggle("open"))
								.start();
							}
						});
				});
			try {
				const res = await useAPI(API.Authentication.authenticateSession);
				if (!res?.data?.isValid) throw new Error("Invalid Session");
			} catch (e) {
				window.location.href = "/login";
			}
		</script>
		<slot />
		<DatepickerCSS />
	</body>
</html>
