<>
	<section
		id="choir"
		class="w-full flex flex-col font-didact items-center justify-center py-10 max-sm:py-4 max-sm:px-2 gap-y-20 overflow-visible max-sm:gap-y-10">
		<h1
			id="choirHead"
			class="heading relative p-2 text-center flex-grow-2 place-self-center text-[3.5vw] max-sm:text-4xl leading-[3.5vw] font-bold drop-shadow-[-1px_2px_1px_rgba(0,0,0,0.25)] font-anaktoria text-red-900 col-span-full overflow-hidden after:left-[calc(50%_-_10ch)] after:w-[20ch] after:bg-red-900 after:max-sm:rounded-sm after:max-sm:h-[2px]">
			Άδοντες & Ψάλλοντες
		</h1>
		<div
			class="flex flex-row w-full max-sm:flex-col-reverse max-sm:pb-8 gap-x-8 max-sm:gap-y-8 justify-evenly max-sm:justify-center overflow-visible">
			<div id="choirText" class="flex flex-col gap-y-2">
				<div>
					<h2
						class="text-[3vw] max-sm:text-2.5xl sm:leading-[2.5vw] max-sm:font-bold font-anaktoria text-red-900 drop-shadow-[-1px_1px_1px_rgba(0,0,0,0.15)]">
						Χορωδία Βυζαντινής &
					</h2>
					<h2
						class="text-[3vw] max-sm:text-2.5xl max-sm:font-bold text-right font-anaktoria text-red-900 drop-shadow-[-1px_1px_1px_rgba(0,0,0,0.15)]">
						Παραδοσιακής Μουσικής
					</h2>
				</div>
				<p class="text-2xl max-sm:text-lg w-[45ch] max-sm:w-full tracking-wide">
					Η αγάπη για την βυζαντινή μουσική και η ανάγκη να παραμείνει ζωντανή η
					ελληνορθόδοξη παράδοσή μας αποτέλεσαν το κίνητρο ίδρυσης της χορωδίας «Άδοντες
					και Ψάλλοντες» από μια ομάδα νέων συναδέλφων ιεροψαλτών και μαθητών. Αποτελεί
					την καρδιά της Σχολής μας και σκοπός της είναι η διάσωση και η διάδοση του
					μουσικού πλούτου της πατρίδας μας. Μέλη της αποτελούν οι Καθηγητές και οι
					μαθητές της Σχολής με εμπνευστή και καθοδηγητή τον ιδρυτή της Πρωτ. Σωτήριο
					Αλεβιζάκη.
				</p>
			</div>
			<div
				id="choirCarousel"
				class="max-w-[850px] max-h-[425px] max-sm:max-h-[225px] flex overflow-hidden shadow-lg max-sm:shadow-md shadow-slate-800 max-sm:shadow-slate-800">
				<img
					src="/choir/choir_1.jpg"
					width="900px"
					alt="Φωτογραφία Χορωδίας"
					class="w-[900px] max-sm:w-[clamp(240px,100%,360px)] h-[425px] max-sm:h-[225px] object-cover"
				/>
			</div>
		</div>
	</section>
	<style is:inline>
		.remove {
			opacity: 1;
			animation: fadeOut 0.3s ease-in-out forwards;
		}
		.open {
			opacity: 0.01;
			animation: fadeIn 0.6s ease-in-out forwards;
		}
		#choirCarousel {
			--tr-per: 0; /* transition percentage */
			--tr-per-op: 0;
			transform: scale(var(--tr-per)) translateX(calc(-25% + 25% * var(--tr-per)));
			transform-origin: right;
		}
		#choirCarousel > img {
			opacity: var(--tr-per-op);
		}
		#choirCarousel::after {
			content: "";
			position: absolute;
			inset: 0;
			background: radial-gradient(transparent 0%, rgba(0, 0, 0, 1) 75%);
			opacity: calc(1 - var(--tr-per-op));
		}
		@media screen and (max-width: 640px) {
			#choirCarousel {
				--tr-per: 0; /* transition percentage */
				transform: scale(var(--tr-per)) translateY(calc(-25% + 25% * var(--tr-per)));
				transform-origin: top;
			}
		}
		#choirText {
			opacity: 1;
		}
		#choirText:is(.show) {
			opacity: 1;
			animation: fadeIn 0.6s ease-in-out forwards;
		}
	</style>
</>
<script>
	import { UpdateHandler } from "../../../lib/utilities/UpdateHandler";
	import { onElementMount } from "../../../lib/utilities/dom";
	import { loadImage } from "../../../lib/utilities/images";
	import { mappedValue } from "../../../lib/utilities/objects";

	onElementMount("#choir", (choir) => {
		const obsv = new IntersectionObserver(
			(entries) => {
				const entry = entries[0];
				const head = document.querySelector("#choirHead") as HTMLElement;
				if (!head) return;
				if (entry.intersectionRatio >= 0.3) head.classList.add("emphasis");
				else if (
					window.matchMedia("(max-width: 640px)").matches &&
					entry.intersectionRatio >= 0.2
				)
					head.classList.add("emphasis");
				else head.classList.remove("emphasis");
			},
			{
				root: null,
				rootMargin: "0px",
				threshold: [0.2, 0.3, 0.4, 0.5],
			},
		);
		obsv.observe(choir);

		const carouselUpdate = new UpdateHandler({ timer: 7500 });
		const carousel = document.querySelector("#choirCarousel") as HTMLDivElement;
		const choirText = document.querySelector("#choirText") as HTMLDivElement;
		let isCarouselVisible = false;
		const obsv2 = new IntersectionObserver(
			(entries) => {
				let { intersectionRatio, target } = entries[0];
				if (document.body.clientHeight < target.clientHeight) {
					const heightRatio =
						Math.min(760, Math.max(540, document.body.clientHeight)) /
						target.clientHeight;
					intersectionRatio = mappedValue(intersectionRatio, 0, heightRatio * 0.85); // max out at 65% of the available height
					carousel.style.setProperty(
						"--tr-per",
						`${mappedValue(intersectionRatio, 0, 1, 1.25, 1).toFixed(3)}`,
					);
					carousel.style.setProperty(
						"--tr-per-op",
						`${mappedValue(intersectionRatio, 0, 1).toFixed(3)}`,
					);
				} else {
					carousel.style.setProperty(
						"--tr-per",
						`${mappedValue(intersectionRatio, 0, 1, 1.4, 1).toFixed(3)}`,
					);
					carousel.style.setProperty(
						"--tr-per-op",
						`${mappedValue(intersectionRatio, 0, 1).toFixed(3)}`,
					);
				}

				if (intersectionRatio >= 0.6 && !choirText.classList.contains("show"))
					choirText.classList.add("show");
				else if (intersectionRatio < 0.6 && choirText.classList.contains("show")) {
					choirText.classList.remove("show");
					choirText.classList.add("remove");
				}
				isCarouselVisible = intersectionRatio > 0.4;
				if (isCarouselVisible && !carouselUpdate.isTriggered()) {
					carouselUpdate.trigger().catch(() => {});
				} else if (!isCarouselVisible && carouselUpdate.isTriggered()) {
					carouselUpdate.abort();
				}
			},
			{
				root: null,
				rootMargin: "0px",
				threshold: new Array(101).fill(0).map((_, i) => i / 100),
			},
		);
		obsv2.observe(choir);
		let index = 0;
		let loadedImgs = 1; // 1 image is already loaded
		const carouselImgs = [
			"/choir/choir_1.jpg",
			"/choir/choir_2.jpg",
			"/choir/choir_3.jpg",
			"/choir/choir_4.jpg",
			"/choir/choir_5.jpg",
		];
		const img = carousel.querySelector("img") as HTMLImageElement;
		carouselUpdate.setFunction(() => {
			let imgSrc = carouselImgs[++index % 5];
			if (loadedImgs < 5) {
				loadedImgs++;
				loadImage(imgSrc, true);
			}
			carousel.classList.remove("open");
			void carousel.clientWidth;
			carousel.classList.add("remove");
			setTimeout(() => {
				img.src = imgSrc;
				carousel.classList.remove("remove");
				void carousel.clientWidth;
				carousel.classList.add("open");
				if (!isCarouselVisible) carouselUpdate.abort();
				else carouselUpdate.reset({ catchAbort : true });
			}, 600);
		});
		carouselUpdate.trigger().catch(() => {});
	});
</script>
