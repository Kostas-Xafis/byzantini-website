---
import { useAPI } from "../../../lib/hooks/useAPI.astro";
import type { Locations } from "../../../types/entities";
import Layout from "../../layouts/Layout.astro";
import GMap from "../../components/GMap.astro";
import { isDevFromURL } from "../../../lib/utils";
let locations = (await useAPI("Locations.getByPriority", {})).data as Locations[];
const imgSrc = isDevFromURL(Astro.url) ? await import.meta.env.S3_OPEN_BUCKET_URL : "/locations/";
const isPreviewSite = Astro.url.hostname === "byzantini-website.pages.dev";
---

<Layout title="Παραρτήματα">
	<div class="group/type w-full h-full grid font-didact" style={{ "grid-template-columns": "max-content 1fr" }}>
		<div id="btsContainer" class="shadow-top relative border-r-2 overflow-auto border-red-900">
			<i class="up opacity-0 absolute fa-solid fa-chevron-up drop-shadow-[0px_2px_1px_rgb(24,24,24,0.6)] text-red-900 text-[1.5cqw] text-center w-[100%] top-0 bg-red-200 bg-opacity-50 backdrop-blur-[2px] z-50"></i>
			<i class="down opacity-0 absolute fa-solid fa-chevron-down drop-shadow-[0px_-2px_1px_rgb(24,24,24,0.6)] text-red-900 text-[1.5cqw] text-center w-[100%] bottom-0 bg-red-200 bg-opacity-50 backdrop-blur-[2px] z-50"></i>
			<div class="w-max h-full grid auto-rows-max cursor-pointer overflow-auto">
			{
				locations.map((l, ind) => (
					<div
						data-show={ind === 0}
						data-name={l.name}
						class="group/btn w-max h-max py-[1cqw] place-self-center grid grid-cols-[1fr_max-content] bg-white transition-colors duration-500 ease-in-out hover:bg-red-900 border-b-2 border-red-900 data-[show]/btn:bg-red-900"
					
					>
						<button class="p-[0.8cqw] w-[20ch] text-[1.25cqw] group-hover/btn:text-white group-data-[show]/btn:text-white transition-colors duration-500 ease-in-out drop-shadow-[-2px_1px_1px_rgba(15,15,15,0.15)]">
							{l.name}
						</button>
						<i class="mt-[0.4cqw] pr-2 fa-solid fa-chevron-right font-bold text-[1cqw] text-red-50 place-self-center opacity-0 drop-shadow-[-2px_1px_1px_rgba(15,15,15,0.15)]"></i>
					</div>
				))
			}
			</div>
		</div>
		<div id="locationsContainer" class="w-full h-full grid grid-rows-[80%] grid-cols-[90%] place-content-center justify-center overflow-auto">
			{
				locations.map((l, i) => {
					return (
						<div
							data-name={l.name}
							class="hidden w-full justify-self-center rounded-2xl shadow-md shadow-gray-400 border-solid border-2 border-red-900"
							class:list={[i === 0 ? " show" : "", !l.image ? " w-max" : ""]}
						> 
							{l.image && (
								<img
									src={imgSrc + l.image}
									alt={"Φωτογραφία Παραρτήματος " + l.name}
									class={"w-[clamp(0px,33cqw,600px)] h-full rounded-l-[14px]" + (isPreviewSite ? " object-fill" : " object-cover")}
								/>
							)}
							<div class="w-max grid auto-rows-max place-content-center gap-y-[1.25cqw] p-[2cqw] grow-[2]">
								<h1
									id="locationsHead"
									class="text-[2cqw] text-center underline underline-offset-4 decoration-1 drop-shadow-[-1px_1px_1px_rgba(0,0,0,0.15)]"
								>
									{l.name}
								</h1>
								<p class="text-[1.25cqw]">
									<i class="fa-solid fa-map-location-dot pr-2 place-self-center" />
									<span class="underline decoration-1 decoration-slate-600 underline-offset-[3px] pr-1">Διεύθυνση:</span>
									{l.address + ", " + l.areacode + " - " + l.municipality}
								</p>
								<p class="text-[1.25cqw]">
									<i class="fa-solid fa-user pr-3 place-self-center" />
									<span class="underline decoration-1 decoration-slate-600 underline-offset-[3px] pr-1">Υπεύθυνος:</span>
									{l.manager}
								</p>
								<p class="text-[1.25cqw]">
									<i class="fa-regular fa-envelope pr-2 place-self-center" />
									<span class="underline decoration-1 decoration-slate-600 underline-offset-[3px] pr-1">Επικοινωνία:</span> 
									<a target="_blank" href={`mailto:${l.email}`}>{l.email ?? ""}</a>•
									{l.telephones.split(",").map((tel) => {
										return (<a target="_blank" href={`tel:${tel}`}>{tel}</a>)
									})}
								</p>
								{l.link ? 
									<a target="_blank" href={l.link} class="w-max rounded-lg text-[1.25cqw] border-red-900 border-solid border-2 p-[0.4cqw] transition-colors hover:bg-red-900 hover:text-white">
										<i class="fa-solid fa-link pr-2"></i> Σύνδεσμος
									</a>
									: <></>}
									<GMap link={l.map} />
							</div>
						</div>
					);
				})
			}
		</div>
	</div>
	<style is:inline>
		button:is(.selected) {
			background-color: rgb(153, 27, 27);
		}
		.remove {
			opacity: 1;
			animation: fadeOut 0.3s ease-in-out forwards;
		}
		.show {
			display: flex;
		}
		#locationsContainer > div:is(:not(.remove)),
		#btsContainer {
			opacity: 0.0001;
			animation: fadeIn 0.6s ease-in-out forwards;
		}
		#btsContainer > div > div:hover i {
			animation: fadeInLeft 0.3s ease-in-out forwards;
		}
		#btsContainer > div {
			-ms-overflow-style: none;  /* Internet Explorer 10+ */
			scrollbar-width: none;  /* Firefox */
		}
		#btsContainer > div::-webkit-scrollbar { 
			display: none;  /* Safari and Chrome */
		}
		#btsContainer:is(.shadow-up) .up {
			opacity: 1;
		}
		#btsContainer:is(.shadow-down) .down {
			opacity: 1;
		}
		
	</style>
</Layout>

<script>
	import { useAPI } from "../../../lib/hooks/useAPI.astro";
	import type { Locations } from "../../../types/entities";

	// wrap all • characters in a span tag like this <span class="px-2 text-lg font-serif">•</span>
	document.querySelectorAll("#locationsContainer > div > div > p").forEach(p => {
		const text = p.innerHTML;
		p.innerHTML = text.replaceAll("•", '<span class="px-2 text-[1.25cqw] font-serif">•</span>');
	});
	const onElementMount = async (target: string, callback: () => any) => {
		let count = 0;
		while (!document.querySelector(target) && count++ < 10) {
			await new Promise(resolve => setTimeout(resolve, 50));
		}
		if (count >= 10) return ;
		callback();
	};
	onElementMount("#locationsContainer", 
		(async function () {
			let locations = (await useAPI("Locations.getByPriority", {})).data as Locations[];
			locations.forEach(l => {
				const btn = document.querySelector(`#btsContainer div[data-name='${l.name}']`) as HTMLElement;
				btn.addEventListener("click", () => {
					const shown = document.querySelector("[data-show]") as HTMLElement | null;
					if (shown === btn) return;

					const container = document.querySelector("#locationsContainer") as HTMLElement;
					const heading = document.querySelector("#locationsHead") as HTMLElement;
					if (shown) {
						const location = container.querySelector(".show") as HTMLElement;
						location.classList.add("remove");

						setTimeout(() => {
							location.classList.remove("show", "remove");
							shown.removeAttribute("data-show");
							void shown.offsetWidth;

							container.querySelector(`div[data-name='${l.name}']`)?.classList.add("show");

							heading.innerText = l.name;
							btn.setAttribute("data-show", "");
						}, 300);
					} else {
						heading.innerText = l.name;
						btn.setAttribute("data-show", "");
					}
				});
			});
			if(window.location.hash) {
				const hash = window.location.hash.replace("#", "");
				const location = decodeURI(hash);
				const btn = document.querySelector(`#btsContainer div[data-name='${location}'] button`) as HTMLElement;
				btn.click();
			}
		})
	)
	onElementMount("#btsContainer", () => {
		// Create an instersection observer that when the are more elements to be scrolled a shadow is added to the bottom of the container. Same case for the top.
		const observer = new IntersectionObserver((entries) => {
			entries.forEach(entry => {
				const container = document.querySelector("#btsContainer") as HTMLElement;
				if (entry.target === container.querySelector("div:first-child")) {
					if (entry.intersectionRatio <= 0.4) {
						container.classList.add("shadow-up");
					} else {
						container.classList.remove("shadow-up");
					}
				} else {
					if (entry.intersectionRatio <= 0.4) {
						container.classList.add("shadow-down");
					} else {
						container.classList.remove("shadow-down");
					}
				}
			});
		}, {
			root: document.querySelector("#btsContainer") as HTMLElement,
			rootMargin: "0px",
			threshold: [0.1, 0.4, 0.5, 0.6, 0.9]
		});
		observer.observe(document.querySelector("#btsContainer > div > div:first-child") as HTMLElement);
		observer.observe(document.querySelector("#btsContainer > div > div:last-child") as HTMLElement);
	});
	onElementMount("#btsContainer", () => {
		const container = document.querySelector("#btsContainer > div") as HTMLElement;
		const btnUp = document.querySelector(".up") as HTMLElement;
		btnUp.addEventListener("click", () => {
			container.scrollBy({
				top: -container.offsetHeight / 4,
				behavior: "smooth"
			});
		});
		const btnDown = document.querySelector(".down") as HTMLElement;
		btnDown.addEventListener("click", () => {
			container.scrollBy({
				top: container.offsetHeight / 4,
				behavior: "smooth"
			});
		});
	});		
</script>
