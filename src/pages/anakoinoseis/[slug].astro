---
import { API, useAPI } from "../../../lib/hooks/useAPI.astro";
import Spinner from "../../components/other/Spinner.astro";
import Layout from "../../layouts/Layout.astro";

let url = Astro.url.pathname;
url = url.endsWith("/") ? url.slice(0, -1) : url;
const announcement_title = (url.split("/").pop() as string).replace(/-/g, " ");
let announcement:
	| ({ id: number; title: string; date: number; content: string; views: number } & {
			images: string[];
	  })
	| undefined;
try {
	const res_announcement = await useAPI(API.Announcements.getByTitle, {
		UrlArgs: { title: announcement_title },
	});
	announcement = res_announcement.data;
	if (!announcement) return Astro.redirect("/404");
} catch (e) {
	return Astro.redirect("/404");
}
const imgSrc = "/anakoinoseis/images/" + announcement.id + "/";
const imgThumbSrc = "/anakoinoseis/images/" + announcement.id + "/thumb_";
---

<Layout title={announcement.title} imageUrl={imgThumbSrc + announcement.images[0]}>
	<section
		id="announcementSection"
		data-announcement-id={announcement.id}
		class="relative flex flex-col p-12 max-sm:p-4 max-sm:px-0 max-sm:pb-20 overflow-auto items-center gap-y-6">
		<h1
			class="heading w-[25ch] max-sm:w-[95dvw] text-5xl max-sm:text-3xl max-sm:px-4 text-center font-bold text-red-900 font-anaktoria drop-shadow-[-1px_2px_1px_rgba(0,0,0,0.25)]">
			{announcement.title}
		</h1>
		<div class="imgLoader group/img max-sm:px-4">
			<div
				class="hidden group-[:is(.loading)]/img:block w-[780px] h-[640px] max-sm:max-h-[420px] overflow-hidden">
				<Spinner />
			</div>
			<div class="group-[:is(.loaded)]/img:block max-w-[780px]">
				<img
					fetchpriority="high"
					data-src={imgSrc + announcement.images[0]}
					src={imgSrc + announcement.images[0]}
					alt={announcement?.title as string}
					height="640"
					class="w-full max-w-[780px] object-cover max-h-[clamp(0px,100vh,640px)] max-sm:max-h-[420px] shadow-md shadow-slate-600"
				/>
			</div>
		</div>
		<div class="text-xl mt-4 self-start pl-8 max-sm:px-4 max-sm:text-base">
			{announcement.content.split("\n").map((p) => <p class="pb-2">{p}</p>)}
		</div>
		<div id="imgContainer" class="flex w-full items-center">
			<div
				class="flex flex-row flex-wrap w-full mt-4 gap-y-6 loading items-center justify-evenly self-center">
				{
					announcement.images.map((image, i) => {
						if (i === 0) return null;
						return (
							<div class="imgLoader group/img" data-imgIndex={i - 1}>
								<div class="hidden group-[:is(.loading)]/img:block w-[460px] h-[320px] ">
									<Spinner />
								</div>
								<button
									type="button"
									class="hidden group-[:is(.loaded)]/img:block max-w-[400px] max-sm:max-w-[95dvw] h-[320px] max-sm:h-auto max-sm:max-h-[420px] transition-shadow hover:shadow-lg !shadow-slate-800 max-sm:shadow-slate-600 max-sm:shadow-md cursor-pointer overflow-hidden">
									<img
										data-src={imgThumbSrc + image}
										alt={announcement?.title as string}
										width="400px"
										class="w-[400px] object-cover h-full"
									/>
								</button>
							</div>
						);
					})
				}
			</div>
		</div>
	</section>
	<div
		id="imageCarouselContainer"
		class={"max-sm:hidden fixed inset-0 py-4 bg-[rgba(40,10,10,0.4)] backdrop-blur-[3px] grid place-content-center z-[1000]" +
			" hidden"}>
		<div
			id="controlsContainer"
			class="relative grid grid-rows-[min-content,1fr] justify-center items-center p-8 bg-[rgba(40,10,10,0.875)] rounded-md shadow-lg shadow-[rgba(40,10,10,1)] backdrop-blur-[4px]">
			<div class="absolute top-2 right-3 flex flex-row justify-end">
				<button id="carouselClose" type="button" class="rounded-xl text-2xl">
					<i class="fa-solid fa-xmark text-white hover:text-red-100"></i>
				</button>
			</div>
			<div
				id="imageCarousel"
				data-index="0"
				class="max-h-[calc(95dvh_-_24px)] grid grid-rows-[calc(95dvh_-_79px),76px] justify-items-center gap-y-2">
				<div class="imgLoader group/img flex flex-col items-center">
					<div
						class="relative max-w-[90dvw] max-h-[calc(95dvh_-_79px)] flex items-center rounded-lg overflow-hidden">
						<div
							class="absolute inset-0 hidden group-[:is(.loading)]/img:flex items-center backdrop-blur-sm">
							<Spinner />
						</div>
						<img
							id="mainCarouselImg"
							alt={announcement.title}
							class="object-cover h-[clamp(0px,100vh,calc(95dvh_-_79px))] hover:shadow-lg !shadow-red-950"
							src={imgSrc + announcement.images.at(1)}
						/>
					</div>
				</div>
				<div id="thumbContainer" class="flex flex-row gap-x-4 items-center self-center">
					<i
						data-direction="left"
						class="pr-8 fa-solid fa-chevron-left font-bold text-2xl text-white hover:text-red-100 max-sm:text-xs max-sm:px-2 max-3xs:text-xs cursor-pointer"
					></i>
					{
						// Have at least up to 5 preview thumbnails in the carousel
						announcement.images
							.slice(1, 6)
							.map((image, i) => (
								<img
									class="w-[60px] aspect-square object-cover h-full rounded-md overflow-hidden opacity-60 transition-opacity duration-300 hover:opacity-90 hover:shadow-lg !shadow-red-950 cursor-pointer"
									alt={announcement?.title}
									src={imgThumbSrc + image}
								/>
							))
					}
					<i
						data-direction="right"
						class="pl-8 fa-solid fa-chevron-right font-bold text-2xl text-white hover:text-red-100 max-sm:text-xs max-sm:px-2 max-3xs:text-xs cursor-pointer"
					></i>
				</div>
			</div>
		</div>
	</div>
	<style>
		body {
			background: radial-gradient(circle at 50% -50%, rgb(234 212 212), transparent);
		}
		#imgContainer button {
			transition: box-shadow 0.2s cubic-bezier(0, 0.8, 0.43, 0.64);
		}
	</style>
	<script>
		import { onElementMount, asyncQueue, sleep } from "../../../lib/utils.client";
		onElementMount("#announcementSection", async (el) => {
			const imgs = [...el.querySelectorAll("img")];
			const imgContainers = [...el.querySelectorAll(".imgLoader")] as HTMLElement[];
			const jobs = imgs.map((img, i) => async () => {
				let loaded = false;
				imgContainers[i].classList.add("loading");
				img.addEventListener("load", () => {
					loaded = true;
					if (i === 0) {
						// Change object-fit to object-contain if the first poster image is has vertical aspect ratio
						if (img.naturalHeight > img.naturalWidth) {
							img.classList.remove("object-cover");
							img.style.setProperty("object-fit", "contain");
						}
					}
					imgContainers[i].classList.remove("loading");
					imgContainers[i].classList.add("loaded");
				});
				img.src = img.dataset.src as string;
				while (!loaded) {
					await sleep(20);
				}
			});
			await asyncQueue(jobs, {
				maxJobs: 5,
			});
			imgContainers.forEach((imgContainer, i) => {
				if (i === 0) return;
				imgContainer.addEventListener("click", () => {
					document.dispatchEvent(
						new CustomEvent("openCarousel", {
							detail: { index: Number(imgContainer.dataset.imgindex as string) },
						}),
					);
				});
			});
		});
		!!window.matchMedia("(min-width: 640px)").matches &&
			onElementMount("i[data-direction]", () => {
				const imgSrcArr = (
					[...document.querySelectorAll("#imgContainer img")] as HTMLImageElement[]
				).map((img) =>
					(img.dataset.src as string).split("/").pop()?.replace("thumb_", ""),
				) as string[];
				console.log(imgSrcArr);
				const announcementId = (
					document.querySelector("section[data-announcement-id]") as HTMLElement
				).dataset.announcementId as string;
				const imgSrc = "/anakoinoseis/images/" + announcementId + "/";
				const imgThumbSrc = "/anakoinoseis/images/" + announcementId + "/thumb_";

				const leftBtn = document.querySelector("i[data-direction='left']") as HTMLElement;
				const rightBtn = document.querySelector("i[data-direction='right']") as HTMLElement;
				const carousel = document.querySelector("#imageCarousel") as HTMLElement;
				const thumbContainer = document.querySelector(
					"#thumbContainer",
				) as HTMLImageElement;

				const thumbCarouselImgs = [...thumbContainer.querySelectorAll("img")];
				const carouselLength = imgSrcArr.length >= 5 ? 5 : imgSrcArr.length;
				const totalLength = imgSrcArr.length;
				const mainCarouselImg = document.querySelector(
					"#mainCarouselImg",
				) as HTMLImageElement;

				function transitionToNextImage(nextIndex: number) {
					const imgLoader = carousel.querySelector(".imgLoader") as HTMLElement;
					imgLoader.classList.add("loading");
					imgLoader.classList.remove("loaded");
					let timer = Date.now();
					mainCarouselImg.addEventListener(
						"load",
						async () => {
							if (Date.now() - timer < 300) {
								await sleep(200); // To avoid the image flickering
							}
							imgLoader.classList.remove("loading");
							imgLoader.classList.add("loaded");
						},
						{ once: true },
					);
					mainCarouselImg.src = imgSrc + imgSrcArr.at(nextIndex);
				}
				function carouselShift(direction: "left" | "right") {
					currIndex =
						(direction === "left" ? currIndex - 1 : currIndex + 1) % imgSrcArr.length;
					transitionToNextImage(currIndex);
					if (totalLength <= 5) return;
					for (let i = 0; i < carouselLength; i++) {
						const nextIndex = (currIndex + i - 2) % imgSrcArr.length; // -2 for the previous 2 images and +1 for the next image
						thumbCarouselImgs[i].src = imgThumbSrc + imgSrcArr.at(nextIndex);
					}
				}
				function carouselGoto(index: number) {
					currIndex = index;
					transitionToNextImage(currIndex);
					if (totalLength <= 5) return;
					for (let i = 0; i < carouselLength; i++) {
						const nextIndex = (currIndex + i - 2) % imgSrcArr.length; // -2 for the previous 2 images and +1 for the next image
						thumbCarouselImgs[i].src = imgThumbSrc + imgSrcArr.at(nextIndex);
					}
				}

				let currIndex = Number(carousel.dataset.index || 0);
				leftBtn.addEventListener("click", () => {
					carouselShift("left");
					carousel.dataset.index = currIndex.toString();
				});
				rightBtn.addEventListener("click", () => {
					carouselShift("right");
					carousel.dataset.index = currIndex.toString();
				});
				thumbCarouselImgs.forEach((thumb, i) => {
					thumb.addEventListener("click", () => {
						let index = totalLength <= 5 ? i : (currIndex + i - 2) % imgSrcArr.length; // -2 for the previous 2 images and +1 for the next image
						carouselGoto(index);
						carousel.dataset.index = currIndex.toString();
					});
				});

				const carouselContainer = document.querySelector(
					"#imageCarouselContainer",
				) as HTMLElement;

				document.addEventListener("openCarousel", (e) => {
					carouselGoto(Number(e.detail.index || 0));
					carousel.dataset.index = currIndex.toString();
					carouselContainer.classList.remove("hidden");
				});
				document.addEventListener("closeCarousel", () => {
					carouselContainer.classList.add("hidden");
				});
				document.addEventListener("keydown", (e) => {
					if (e.key === "ArrowLeft") {
						carouselShift("left");
					} else if (e.key === "ArrowRight") {
						carouselShift("right");
					} else if (e.key === "Escape") {
						carouselContainer.classList.add("hidden");
					}
				});
			});
		!!window.matchMedia("(min-width: 640px)").matches &&
			onElementMount("#carouselClose", (el) => {
				el.addEventListener("click", () => {
					document.dispatchEvent(new CustomEvent("closeCarousel"));
				});
			});
		window.matchMedia("(max-width: 640px)").matches &&
			onElementMount("#imgContainer", () => {
				const imgs = [
					...document.querySelectorAll("#imgContainer img"),
				] as HTMLImageElement[];
				imgs.forEach((img, i) => {
					img.addEventListener("click", (e) => {
						window.open(img.src.replace("thumb_", ""), "_blank");
					});
				});
			});
	</script>
</Layout>
