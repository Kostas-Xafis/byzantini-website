---
import { useAPI, API } from "../../../lib/hooks/useAPI.astro";
import { isDevFromURL } from "../../../lib/utils";
import type { Instruments, Locations, TeacherInstruments, TeacherLocations, Teachers } from "../../../types/entities";
import Layout from "../../layouts/Layout.astro";

const [byz_teachers_res, par_teachers_res, eur_teachers_res, teacher_locations_res, locations_res, teacher_instruments_res, instruments_res] = await Promise.all([
	useAPI(API.Teachers.getByPriorityClasses, {UrlArgs: {"class_type": "byz"}}),
	useAPI(API.Teachers.getByPriorityClasses, {UrlArgs: {"class_type": "par"}}),
	useAPI(API.Teachers.getByPriorityClasses, {UrlArgs: {"class_type": "eur"}}),
	useAPI(API.Teachers.getLocations, {}),
	useAPI(API.Locations.get, {}),
	useAPI(API.Teachers.getInstruments, {}),
	useAPI(API.Instruments.get, {}),
]);

const [byz_teachers, par_teachers, eur_teachers, teacher_locations, locations, teacher_instruments, instruments] = [
	byz_teachers_res.data as Teachers[], 
	par_teachers_res.data as Teachers[], 
	eur_teachers_res.data as Teachers[], 
	teacher_locations_res.data as TeacherLocations[], 
	locations_res.data as Locations[],
	teacher_instruments_res.data as TeacherInstruments[],
	instruments_res.data as Instruments[]
];

const enum MusicType {
	Byzantine = "byz",
	Traditional = "par",
	European = "eur",
	None = ""
}

const teachers = [
	[byz_teachers, MusicType.Byzantine],
	[par_teachers, MusicType.Traditional],
	[eur_teachers, MusicType.European]
] as const;

const teacher_classes = teachers.map(([teachers, type], index) => {
	return teachers.map(teacher => {
			return {
				teacher_id: teacher.id,
				class_id: index + 1
			};
		}).flat();
}).flat();


const music = [
	["Βυζαντινή Μουσική", MusicType.Byzantine],
	["Παραδοσιακή Μουσική", MusicType.Traditional],
	["Ευρωπαϊκή Μουσική", MusicType.European]
] as const;
const imgSrc = "/kathigites/images/";
const cvSrc = "/kathigites/cv/";

// const musicEnd = [
// 	["Βυζαντινής Μουσικής", MusicType.Byzantine],
// 	["Παραδοσιακής Μουσικής", MusicType.Traditional],
// 	["Ευρωπαϊκής Μουσικής", MusicType.European]
// ] as const;
---

<Layout title="Καθηγητές">
	<div class="group/type w-full h-full grid grid-cols-[max-content_1fr] font-didact">
		<div id="btsContainer" class="w-max h-full grid grid-rows-[repeat(3,max-content)] border-r-2 border-red-900">
			{
				music.map(([str, type], ind) => (
					<div id={type} data-show={ind === 0} data-type={type} class={
						"group/btn relative cursor-pointer w-full h-max py-6 place-self-center red-300 grid grid-cols-[1fr_max-content] bg-white border-red-900 border-b-2"
						+" after:transition-opacity after:duration-500 after:ease-in-out after:inset-0 after:w-full after:h-full after:absolute after:opacity-[0.001%]"
						+" after:bg-gradient-to-r after:from-[#ff9387] after:from-[-200%] after:to-red-900" 
						+" hover:after:opacity-100 data-[show]:after:opacity-100"}>
						<button
							class="p-6 text-2xl z-10 group-hover/btn:text-white group-data-[show]/btn:text-white transition-colors duration-500 ease-in-out drop-shadow-[-2px_1px_1px_rgba(15,15,15,0.15)]"
							data-type={type}
						>
							{str}
						</button>
						<i class="mt-2 pr-6 fa-solid fa-chevron-right font-bold text-xl text-red-50 place-self-center z-10 opacity-0 drop-shadow-[-2px_1px_1px_rgba(15,15,15,0.15)]"></i>
					</div>
				))
			}
		</div>
		<div id="teachersContainer" class="w-full grid auto-rows-[max-content] grid-flow-row p-14 gap-y-10 overflow-auto">
			<h1 id="teachersHead" class="text-4xl pb-8 justify-self-center drop-shadow-[-2px_1px_1px_rgba(15,15,15,0.15)]">Καθηγητές Βυζαντινής Μουσικής</h1>
			{
				teachers.map(([teachersByType, type]) => {
					return teachersByType.map(teacher => {
						const t_classes_str = teacher_classes.filter(c => c.teacher_id === teacher.id)?.map(c => music[c.class_id - 1][0]);
						const t_locations = teacher_locations.filter(l => l.teacher_id === teacher.id)?.map(l => locations.find((loc) => loc.id === l.location_id)?.name || "");
						const t_instrument_list = teacher_instruments.filter(i => i.teacher_id === teacher.id)?.map(i => instruments.find((inst) => inst.id === i.instrument_id) as Instruments);
						const t_instruments = t_instrument_list.filter(i => i.isInstrument)?.map(i => i.name);
						const t_nonInstruments = t_instrument_list.filter(i => !i.isInstrument)?.map(i => i.name);
						t_instruments?.sort();
						t_nonInstruments?.sort();
						return (
						<div class={"hidden show w-max grid-cols-[max-content_1fr_max-content] rounded-2xl shadow-md shadow-gray-500 border-solid border-2 border-red-900"
							+ (type === MusicType.Byzantine ? " group-[:has(#byz[data-show])]/type:grid" : "") 
							+ (type === MusicType.Traditional ? " group-[:has(#par[data-show])]/type:grid" : "") 
							+ (type === MusicType.European ? " group-[:has(#eur[data-show])]/type:grid" : "")}>
							{teacher.picture ? (
								<img src={imgSrc + teacher.picture} width="200" alt={"Φωτογραφία Καθηγητή " + teacher.fullname} class="w-[200px] h-full object-cover rounded-l-[13px]" />
							) : (
								<div />
							)}
							<div class="w-max grid auto-rows-max gap-y-2 p-4">
								<p class="text-3xl underline underline-offset-4 decoration-1 drop-shadow-[-1px_1px_1px_rgba(0,0,0,0.15)]">{teacher.fullname}</p>
								<p class="text-xl rounded-lg bg-red-900 text-white p-2 w-max">{t_locations.join("•")}</p>
								<p class="text-xl"><span class="underline decoration-1 decoration-slate-600 underline-offset-[3px] pr-3">Διδάσκων:</span>{t_classes_str.join('•')}</p>
								{t_instruments && t_instruments.length > 0 ? (
									<p class="text-xl"><span class="underline decoration-1 decoration-slate-600 underline-offset-[3px] pr-3">Όργανα:</span>{t_instruments.join('•')}</p>
								) : (
									<></>
								)}
								{t_nonInstruments && t_nonInstruments.length > 0 ? (
									<p class="text-xl max-w-[60ch]"><span class="underline decoration-1 decoration-slate-600 underline-offset-[3px] pr-3">Μαθήματα:</span>{t_nonInstruments.join('•')}</p>
								) : (
									<></>
								)}
								{teacher.cv ?
									<a target="_blank" href={cvSrc + teacher.cv} class="w-max rounded-lg text-xl border-red-900 border-solid border-2 p-2 transition-colors hover:bg-red-900 hover:text-white">
										<i class="fa-solid fa-file-lines pr-2"></i> Βιογραφικό
									</a>
									: <></>}
							</div>
						</div>
						)
					})
				})
			}
		</div>
	</div>
	<style is:inline>
		button:is(.selected) {
			background-color: rgb(153, 27, 27);
		}
		.remove {
			opacity: 1;
			animation: fadeOut 0.3s ease-in-out forwards;
		}
		.show {
			opacity: 0.01;
			animation: fadeIn 0.3s ease-in-out forwards;
		}
		#teachersContainer:is(:not(.remove)), #btsContainer  {
			opacity: 0.0001;
			animation: fadeIn 0.6s ease-in-out forwards;
		}
		#btsContainer > div:hover i {
			animation: fadeInLeft 0.3s ease-in-out forwards;
		}
	</style>
</Layout>
<script>
	enum MusicType {
		byz = "Βυζαντινής Μουσικής",
		par = "Παραδοσιακής Μουσικής",
		eur = "Ευρωπαϊκής Μουσικής"
	}

	// wrap all • characters in a span tag like this <span class="px-2 text-lg font-serif">•</span>
	document.querySelectorAll("#teachersContainer p").forEach(p => {
		const text = p.innerHTML;
		p.innerHTML = text.replaceAll("•", '<span class="px-2 text-lg font-serif">•</span>');
	});	

	document.querySelectorAll("div:has(> button[data-type])").forEach(btn => {
		const type = btn.getAttribute("data-type") as "byz" | "par" | "eur";
		btn.addEventListener("click", () => {
			const shown = document.querySelector("[data-show]") as HTMLElement | null;
			if (shown === btn) return;
			const container = document.querySelector("#teachersContainer") as HTMLElement;
			const heading = document.querySelector("#teachersHead") as HTMLElement;
			if (shown) {
				container.classList.add("remove");
				void container.offsetWidth;
				setTimeout(() => {
					shown.removeAttribute("data-show");
					container.classList.remove("remove");
					heading.innerText = "Καθηγητές " + MusicType[type];
					btn.setAttribute("data-show", "");
				}, 300);
			} else {
				heading.innerText = "Καθηγητές " + MusicType[type];
				btn.setAttribute("data-show", "");
			}
		})
	})
	if(window.location.hash) {
		const hash = window.location.hash.replace("#", "");
		const type = decodeURI(hash);
		const music = {
			"Βυζαντινή Μουσική": "byz",
			"Παραδοσιακή Μουσική": "par",
			"Ευρωπαϊκή Μουσική": "eur"
		} as Record<string, string>;
		if (type in music) {
			const btn = document.querySelector(`#btsContainer #${music[type]} button`) as HTMLElement;
			btn.click();
		}
	}
	const onElementMount = async (target: string, callback: () => any) => {
		while (!document.querySelector(target)) {
			console.log("waiting for element to mount: " + target);
			await new Promise(resolve => setTimeout(resolve, 100));
		}
		callback();
	};
	onElementMount("#teachersContainer", () => {
		const obsv = new IntersectionObserver((entries) => {
			entries.forEach(entry => {
				const isVisible = entry.target.classList.contains("show"); 
				if (entry.intersectionRatio <= 0.05 && isVisible) {
					entry.target.classList.remove("show");
					entry.target.classList.add("remove");
				} else if (entry.intersectionRatio >= 0.2 && !isVisible) {
					entry.target.classList.remove("remove");
					entry.target.classList.add("show");
				}
			})
		}, {
			threshold: [...(new Array(10).fill(0).map((x,i) => i / 100)), 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0],
		});
		const teachersCard = document.querySelectorAll("#teachersContainer > div");
		teachersCard.forEach((card) => {
			obsv.observe(card);
		})
	});
</script>