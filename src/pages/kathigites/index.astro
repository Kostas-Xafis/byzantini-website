---
import { useAPI, API } from "../../../lib/hooks/useAPI.astro";
import { isDevFromURL } from "../../../lib/utils";
import type { Instruments, Locations, TeacherInstruments, TeacherLocations, Teachers } from "../../../types/entities";
import Layout from "../../layouts/Layout.astro";

const [byz_teachers_res, par_teachers_res, eur_teachers_res, teacher_locations_res, locations_res, teacher_instruments_res, instruments_res] = await Promise.all([
	useAPI(API.Teachers.getByPriorityClasses, {UrlArgs: {"class_type": "byz"}}),
	useAPI(API.Teachers.getByPriorityClasses, {UrlArgs: {"class_type": "par"}}),
	useAPI(API.Teachers.getByPriorityClasses, {UrlArgs: {"class_type": "eur"}}),
	useAPI(API.Teachers.getLocations, {}),
	useAPI(API.Locations.get, {}),
	useAPI(API.Teachers.getInstruments, {}),
	useAPI(API.Instruments.get, {}),
]);

const [byz_teachers, par_teachers, eur_teachers, teacher_locations, locations, teacher_instruments, instruments] = [
	byz_teachers_res.data as Teachers[], 
	par_teachers_res.data as Teachers[], 
	eur_teachers_res.data as Teachers[], 
	teacher_locations_res.data as TeacherLocations[], 
	locations_res.data as Locations[],
	teacher_instruments_res.data as TeacherInstruments[],
	instruments_res.data as Instruments[]
];

const enum MusicType {
	Byzantine = "byz",
	Traditional = "par",
	European = "eur",
	None = ""
}

const teachers = [
	[byz_teachers, MusicType.Byzantine],
	[par_teachers, MusicType.Traditional],
	[eur_teachers, MusicType.European]
] as const;

const teacher_classes = teachers.map(([teachers, type], index) => {
	return teachers.map(teacher => {
			return {
				teacher_id: teacher.id,
				class_id: index + 1
			};
		}).flat();
}).flat();


const music = [
	["Βυζαντινή Μουσική", MusicType.Byzantine],
	["Παραδοσιακή Μουσική", MusicType.Traditional],
	["Ευρωπαϊκή Μουσική", MusicType.European]
] as const;

const musicOnly = [
	["Βυζαντινής", MusicType.Byzantine],
	["Παραδοσιακής", MusicType.Traditional],
	["Ευρωπαϊκής", MusicType.European]
] as const;

const musicSmallEnd = [
	["Βυζαντινής μουσικής", MusicType.Byzantine],
	["Παραδοσιακής μουσικής", MusicType.Traditional],
	["Ευρωπαϊκής μουσικής", MusicType.European]
] as const;

const imgSrc = isDevFromURL(Astro.url) ? await import.meta.env.S3_OPEN_BUCKET_URL : "/kathigites/images/";
const cvSrc = isDevFromURL(Astro.url) ? await import.meta.env.S3_OPEN_BUCKET_URL : "/kathigites/cv/";

// const musicEnd = [
// 	["Βυζαντινής Μουσικής", MusicType.Byzantine],
// 	["Παραδοσιακής Μουσικής", MusicType.Traditional],
// 	["Ευρωπαϊκής Μουσικής", MusicType.European]
// ] as const;

---

<Layout title="Καθηγητές">
	<div class="group/type w-full h-full grid grid-cols-[max-content_1fr] font-didact max-sm:grid-cols-[100%] max-sm:grid-rows-[max-content_1fr]">
		<div id="btsContainer" class="w-max h-full grid grid-rows-[repeat(3,max-content)] border-r-2 max-sm:border-none border-red-900 max-sm:w-full max-sm:grid-rows-1 max-sm:grid-cols-[repeat(3,_1fr)]">
			{
				music.map(([str, type], ind) => (
					<div id={type} data-show={ind === 0} data-type={type} class={
						"group/btn relative cursor-pointer w-full h-max py-[1cqw] max-sm:pt-2 place-self-center red-300 grid grid-cols-[1fr_max-content] max-sm:grid-cols-[100%] max-sm:justify-items-center bg-white border-red-900 border-b-2"
						+ " after:transition-opacity after:duration-500 after:ease-in-out after:inset-0 after:w-full after:h-full after:absolute after:opacity-[0.001%]"
						+ " after:bg-gradient-to-r after:from-[#ff9387] after:from-[-200%] after:to-red-900" 
						+ " hover:after:opacity-100 data-[show]:after:opacity-100"}>
						<button
							class="p-[0.8cqw] text-[1.5cqw] max-sm:text-sm max-sm:w-[13ch] first-of-type:max-sm:w-[12ch] z-10 group-hover/btn:text-white group-data-[show]/btn:text-white transition-colors duration-500 ease-in-out drop-shadow-[-2px_1px_1px_rgba(15,15,15,0.15)]"
							data-type={type}
						>
							{str}
						</button>
						<i class="mt-[0.4cqw] pr-2 fa-solid fa-chevron-right font-bold text-xl text-red-50 place-self-center z-10 opacity-0 drop-shadow-[-2px_1px_1px_rgba(15,15,15,0.15)] max-sm:hidden"></i>
					</div>
				))
			}
		</div>
		<div id="teachersContainer" class="w-full flex flex-wrap gap-x-[1.25cqw] p-[2cqw] pr-0 gap-y-[1cqw] max-sm:pt-6 max-sm:gap-y-6 overflow-auto max-sm:max-w-[calc(100%-0.5rem)]">
			<h1 id="teachersHead" class="text-[3cqw] max-sm:text-2xl font-anaktoria font-bold text-red-900 w-full flex-grow pb-[1.5cqw] text-center drop-shadow-[-1px_1px_1px_rgba(15,15,15,0.1)]">Καθηγητές Βυζαντινής Μουσικής</h1>
			{
				teachers.map(([teachersByType, type]) => {
					return teachersByType.map(teacher => {
						const t_classes_str = teacher_classes.filter(c => c.teacher_id === teacher.id)?.map(c => musicOnly[c.class_id - 1][0]);
						const t_locations = teacher_locations.filter(l => l.teacher_id === teacher.id)?.map(l => locations.find((loc) => loc.id === l.location_id)?.name || "");
						const t_instrument_list = teacher_instruments.filter(i => i.teacher_id === teacher.id)?.map(i => instruments.find((inst) => inst.id === i.instrument_id) as Instruments);
						const t_instruments = t_instrument_list.filter(i => i.isInstrument)?.map(i => i.name);
						const t_nonInstruments = t_instrument_list.filter(i => !i.isInstrument)?.map(i => i.name);
						if (t_classes_str.includes("Βυζαντινής")) t_nonInstruments?.push("Βυζαντινής μουσικής");
						t_instruments?.sort();
						t_nonInstruments?.sort();
						return (
						<div class={"group/card hidden show w-max odd:flex-row-reverse rounded-2xl @7xl:rounded-2xl @4xl:rounded-lg max-sm:rounded-md max-sm:justify-items-center shadow-md shadow-gray-500 border-solid border-2 max-sm:border border-red-900"
							+ (type === MusicType.Byzantine ? " group-[:has(#byz[data-show])]/type:flex" : "") 
							+ (type === MusicType.Traditional ? " group-[:has(#par[data-show])]/type:flex" : "") 
							+ (type === MusicType.European ? " group-[:has(#eur[data-show])]/type:flex" : "")}>
							{teacher.picture ? (
								<img src={imgSrc + teacher.picture} width="200" alt={"Φωτογραφία Καθηγητή " + teacher.fullname} class="w-[clamp(0px,20cqw,200px)] max-sm:w-[clamp(120px,25vw,250px)] h-full object-cover max-sm:group-even/card:rounded-l-[4px] group-even/card:rounded-l-[13px] max-sm:group-odd/card:rounded-r-[4px] group-odd/card:rounded-r-[13px]" />
							) : (
								<div />
							)}
							<div class="flex flex-col gap-y-[0.4cqw] p-[0.8cqw] max-sm:gap-y-2 max-sm:w-full max-sm:py-3 max-sm:pl-3">
								<p class="text-[2cqw] max-sm:max-w-[25ch] max-sm:text-lg max-2xs:text-base underline underline-offset-4 decoration-1 drop-shadow-[-1px_1px_1px_rgba(0,0,0,0.15)]">{teacher.fullname}</p>
								<p class="text-[1.25cqw] max-sm:max-w-[30ch] max-[300px]:max-w-[25ch] max-sm:text-2xs rounded-lg max-sm:rounded-md bg-red-900 text-white p-[0.4cqw] max-sm:p-2 max-w-[35ch]">{t_locations.map((str, i) => {
										const dot = i === t_locations.length - 1 ? "" : "•";
										return(<>{str}&thinsp;{dot}&thinsp;</>)
								})}</p>
								<p class="text-[1.25cqw] max-sm:max-w-[30ch] max-sm:text-2xs"><span class="underline decoration-1 decoration-slate-600 underline-offset-[3px] pr-2 max-sm:pr-1">Καθηγητής:</span><span>{t_classes_str.length ? t_classes_str.map((str, i) => {
										let len = t_classes_str.length;
										if (len === 1) {
											return(<>{str}&thinsp;Μουσικής</>)
										} else if(len === 2) {
											if (i === 0) return(<>{str}&thinsp;και&thinsp;</>)
											else return(<>{str}&thinsp;Μουσικής</>)
										} else {
											if (i === len - 1) return(<>{str}&thinsp;Μουσικής</>)
											else if (i === len - 2) return(<>{str}&thinsp;και&thinsp;</>)
											else return(<>{str},&thinsp;</>)
										}
										
								}) : ""}</span></p>
								{t_instruments && t_instruments.length > 0 ? (
									<p class="text-[1.25cqw] max-sm:text-2xs max-sm:leading-2xs max-w-[50ch] flex flex-row flex-wrap max-sm:gap-y-1 gap-y-2 max-sm:max-w-[55ch]">
										<span class="underline decoration-1 decoration-slate-600 underline-offset-[3px] pr-2 max-sm:pr-1">{t_instruments.length === 1 ? "Όργανο:" : "Όργανα:"}</span>
										{t_instruments.map((instr, i) => {
											const dot = i === t_instruments.length - 1 ? "" : "•";
											return (
												<>{instr}&thinsp;{dot}&thinsp;</>
											)
										})}
									</p>
								) : (
									<></>
								)}
								{t_nonInstruments && t_nonInstruments.length > 0 ? (
									<p class="text-[1.25cqw] max-sm:text-2xs max-sm:leading-2xs max-w-[50ch] flex flex-row flex-wrap max-sm:gap-y-1 gap-y-2 max-sm:max-w-[55ch]">
										<span class="underline decoration-1 decoration-slate-600 underline-offset-[3px] pr-2 max-sm:pr-1">Μαθήματα:</span>
										{t_nonInstruments.map((instr, i) => {
											const dot = i === t_nonInstruments.length - 1 ? "" : "•";
											return (
												<span>{instr}&thinsp;{dot}&thinsp;</span> 
											)
										})}
									</p>
								) : (
									<></>
								)}
								{teacher.cv ?
									<a target="_blank" href={cvSrc + teacher.cv} class="w-max max-sm:text-2xs max-sm:leading-2xs rounded-lg max-sm:rounded-md text-[1.25cqw] max-sm:text-xs border-red-900 border-solid border-2 max-sm:border p-[0.6cqw] max-sm:p-1 max-sm:px-2 transition-colors hover:bg-red-900 hover:text-white">
										<i class="fa-solid fa-file-lines pr-2 max-sm:text-2xs max-sm:pr-1"></i> Βιογραφικό
									</a>
									: <></>}
							</div>
						</div>
						)
					})
				})
			}
		</div>
	</div>
	<style is:inline>
		button:is(.selected) {
			background-color: rgb(153, 27, 27);
		}
		.remove {
			opacity: 1;
			animation: fadeOut 0.3s ease-in-out forwards;
		}
		.show {
			opacity: 0.01;
			animation: fadeIn 0.6s ease-in-out forwards;
		}
		#teachersContainer:is(:not(.remove)), #btsContainer  {
			opacity: 0.0001;
			animation: fadeIn 0.6s ease-in-out forwards;
		}
		#btsContainer > div:hover i {
			animation: fadeInLeft 0.3s ease-in-out forwards;
		}
	</style>
</Layout>
<script>
	enum MusicType {
		byz = "Βυζαντινής Μουσικής",
		par = "Παραδοσιακής Μουσικής",
		eur = "Ευρωπαϊκής Μουσικής"
	}
	document.querySelectorAll("div:has(> button[data-type])").forEach(btn => {
		const type = btn.getAttribute("data-type") as "byz" | "par" | "eur";
		btn.addEventListener("click", () => {
			const shown = document.querySelector("[data-show]") as HTMLElement | null;
			if (shown === btn) return;
			const container = document.querySelector("#teachersContainer") as HTMLElement;
			const heading = document.querySelector("#teachersHead") as HTMLElement;
			if (shown) {
				container.classList.add("remove");
				void container.offsetWidth;
				setTimeout(() => {
					shown.removeAttribute("data-show");
					container.classList.remove("remove");
					heading.innerText = "Καθηγητές " + MusicType[type];
					btn.setAttribute("data-show", "");
					document.querySelector("#teachersHead")?.scrollIntoView({behavior: "smooth", block: "start"});
				}, 300);
			} else {
				heading.innerText = "Καθηγητές " + MusicType[type];
				btn.setAttribute("data-show", "");
			}
		})
	})
	if(window.location.hash) {
		const hash = window.location.hash.replace("#", "");
		const type = decodeURI(hash);
		const music = {
			"Βυζαντινή Μουσική": "byz",
			"Παραδοσιακή Μουσική": "par",
			"Ευρωπαϊκή Μουσική": "eur"
		} as Record<string, string>;
		if (type in music) {
			const btn = document.querySelector(`#btsContainer #${music[type]} button`) as HTMLElement;
			setTimeout(() => {
				btn.click();
			}, 500);
		}
	}
	const onElementMount = async (target: string, callback: () => any) => {
		let count = 0;
		while (!document.querySelector(target) && count++ < 10) {
			console.log("waiting for element to mount: " + target);
			await new Promise(resolve => setTimeout(resolve, 100));
		}
		if (count >= 10) return;
		callback();
	};
	onElementMount("#teachersContainer", () => {
		const obsv = new IntersectionObserver((entries) => {
			entries.forEach(entry => {
				const isVisible = entry.target.classList.contains("show"); 
				if (entry.intersectionRatio <= 0.05 && isVisible) {
					entry.target.classList.remove("show");
					entry.target.classList.add("remove");
				} else if (entry.intersectionRatio >= 0.2 && !isVisible) {
					entry.target.classList.remove("remove");
					entry.target.classList.add("show");
				}
			})
		}, {
			threshold: [...(new Array(10).fill(0).map((x,i) => i / 100)), 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0],
		});
		const teachersCard = document.querySelectorAll("#teachersContainer > div");
		teachersCard.forEach((card) => {
			obsv.observe(card);
		})
	});
</script>